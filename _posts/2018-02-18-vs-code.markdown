---
layout: post
title:  "Visual Studio Code"
date:   2018-02-17 21:13:30 +0300
categories: technologies
tags: [technologies, vs code]
image:
  feature: 2018-02-18/vscode.png
  teaser: 2018-02-18/vscode-teaser.png
---

Программист постоянно работает с исходными кодами. Инструменты для написания кода можно разделить на две группы: среды разработки (IDE) и редакторы. Первые предоставляют большие возможности при разработке программ: отладку, управление пакетами, интеграцию с тестами и тд. Например: Visual Studio, Intellij IDEA, Eclipse. Редакторы -- легковесные программы, в которых нет таких широких возможностей как в IDE. Тем не менее они выполняют главную функцию -- помогают быстро писать код. А многие из них предоставляют богатые возможности по настройке под себя. Примеры редакторов кода: Sublime Text, Atom, Notepad++. 

Visual Studio Code -- промежуточный вариант между IDE и простым редактором. Он позиционируется как редактор кода, но содержит ряд возможностей, свойственных средам разработки. Сегодня мы разберемся, что из себя представляет VS Code, и рассмотрим некоторые функции, которые могут вам пригодиться. Поэтому пост заинтересует и тех, кто не знаком с этим редактором, и активных пользователей, которые найдут полезное для себя.

# VS Code
Visual Studio Code -- редактор кода от Microsoft. Он бесплатный, и скачать его можно на [официальном сайте](https://code.visualstudio.com/). VS Code соответствует новой политике Microsoft, поэтому он [опенсорсный](https://github.com/Microsoft/vscode) и работает на нескольких платформах. Рассмотрим отличительные черты этого редактора:
- **Скорость**. Часто возникает ситуация, когда нужно поправить пару файлов в проекте или посмотреть, как что-то реализовано. В такой ситуации открывать тяжеловесную IDE совсем не хочется. Время запуска VS Code сопоставимо с другими редакторами кода.
- **Кастомизация**. При разработке программ можно повысить свою продуктивность, настроив редактор под себя. Создавайте сниппеты, меняйте комбинации клавиш и создавайте новые, измените внешний вид редактора. VS Code предоставляет большие возможности для кастомизации и сегодня мы посмотрим на них подробно.
- **Поддержка различных языков**. VS Code понимает более 30 языков программирования. Под этим я имею ввиду выделение разными цветами методов, локальных переменных и так далее. Кроме того, из коробки полностью поддерживаются распространенные языки для веб-разработки: JavaScript, TypeScript, HTML, CSS. Для них работают все фичи, которые нужны при полноценной разработке: подсветка ошибок, подсказки по их исправлению, IntelliSense, навигация по коду, отладка, рефакторинг. Однако, это не значит, что остальные языки обделены. Перейдем к следующему пункту.
- **Расширяемость**. В VS Code богатая коллекция плагинов. С их помощью можно не только включить поддержку любых языков программирования, но и значительно повысить свою производительность.
- **IntelliSense**. Все предыдущие пункты не новы для других редакторов кода, но, как уже было сказано, VS Code -- не просто редактор кода. Он предоставляет возможности, которые свойственны IDE, и IntelliSense одна из них. Этим термином называется умный автокомплит. Например, во время ввода он может подсказать, какие методы и свойства есть у объекта.
- **Отладка**. Еще одна стандартная фича IDE. Обходы методов, Call Stack, просмотр состояний локальных объектов, точки останова, в том числе и условные -- все это есть.

# Внешний вид
В нужной директории введите в терминал {% ihighlight bash %} code . {% endihighlight %} и увидите подобную картину:
![vs-code]({{ site.baseurl }}/assets/img/2018-02-18/vs-code.png)

Слева находятся пять блоков. Посмотрим, за что отвечает каждый из них. ![tabs]({{ site.baseurl }}/assets/img/2018-02-18/tabs.png){: .book-image}
- **Explorer**. На изображении выше открыт этот блок. В нем определяется *workspace* -- файлы, с которыми вы работаете. Имя рабочего пространства соответствует корневой директории. Над ним перечислены все открытые в редакторе файлы. Кружком помечены те, которые не сохранены.
- **Search**. Поиск по workspace. Можно искать с учетом регистра, целых слов и по шаблону. В этом же блоке работает замена строк. Для перехода в режим поиска можно использовать комбинацию {% ihighlight bash %} CTRL + SHIFT + F {% endihighlight %}. При наведении курсора на любой блок VS Code подскажет какие комбинации клавиш им соответствуют.
- **Source Control**. Встроенная поддержка git и других систем контроля версий. ![git]({{ site.baseurl }}/assets/img/2018-02-18/git.png)
- **Debug**. Все для отладки: Variables, Call Stack, Watch, Breakpoints.
- **Extensions**. Набор всевозможных плагинов, которые можно установить. Вот список самых популярных:
![extensions]({{ site.baseurl }}/assets/img/2018-02-18/extensions.png)

В центральной части редактора вкладки с открытыми файлами. Несохраненные также помечаются кружком. При запуске VS Code открывается вкладка *Welcome*. Начать изучение редактора советую с нее. Открыть ее всегда можно через меню *Help*. Еще один способ изучить возможности VS Code -- нажать {% ihighlight bash %} CTRL + SHIFT + P {% endihighlight %}. Так вы откроете **Command Palette**, где перечислены все команды редактора. Рядом с названием команды указывается комбинация клавиш, которая ей соответствует.
![palette]({{ site.baseurl }}/assets/img/2018-02-18/palette.png)

В нижней части -- несколько других полезных вкладок. В *Problems* перечислены все ошибки и предупреждения от VS Code. Во время отладки можно смотреть значения локальных объектов в разделе *Debug Console*, а результаты выполнения во вкладке *Output*. В VS Code есть встроенный терминал, который открывается в корневой директории. По кнопке "плюс" можно добавлять терминалы, например, чтобы выполнять команды в разных директориях внутри проекта. По умолчанию для Windows в VS Code используется Powershell терминал, но это можно изменить. Займемся этим в следующем разделе.
![terminal]({{ site.baseurl }}/assets/img/2018-02-18/terminal1.png)

# Кастомизация
В VS Code можно настроить очень многое под свои нужды. Меняйте внешний вид редактора и автоматизируйте ваши действия.

## Изменение темы
Выберете цветовую гамму, которая нравится вам больше. В дефолтном варианте у редактора темная тема. Для смены нажмите {% ihighlight bash %} CTRL + K, CTRL + T {% endihighlight %}. Если набора из 14 стандартных тем будет недостаточно, введите в разделе с плагинами {% ihighlight bash %} category:themes {% endihighlight %} и выберете подходящую для вас.
![themes]({{ site.baseurl }}/assets/img/2018-02-18/themes.png)

## Изменение настроек
Все дефолтные настройки VS Code перечислены в формате JSON. Чтобы переопределить их для себя, нужно создать файл *settings.json* и перечислить настройки, которые вы хотите изменить. Для этого нажмите {% ihighlight bash %} CTRL + , {% endihighlight %}. Слева перечислены все стандартные настройки и описание того, зачем они нужны. Справа -- две вкладки: для пользовательских настроек и для настроек конкретного workspace. Для изменения дефолтного значения просто кликните на значок карандаша справа от настройки.
![settings]({{ site.baseurl }}/assets/img/2018-02-18/settings1.png)

Рассмотрим некоторые настройки, которые могут вам пригодиться:
- Настройки редактирования.
    - Размер шрифта. {% ihighlight json %} "editor.fontSize": 14 {% endihighlight %}
    - Размер таба. {% ihighlight json %} "editor.tabSize": 4 {% endihighlight %}
    - Шрифт. {% ihighlight json %} "editor.fontFamily": "Consolas, 'Courier New', monospace" {% endihighlight %}
    - Перенос слов. {% ihighlight json %}  "editor.wordWrap": "on" {% endihighlight %}

    Если с первыми тремя настройками все понятно, то последнюю нужно пояснить. Когда она включена, слово, которое не помещается по длине в размер редактора, будет целиком перенесено на следующую строку. При этом горизонтальный скролл никогда не появится. Удобная настройка, которая по умолчанию отключена.
- Настройки файлов.
    - Автосохранение. {% ihighlight json %} "files.autoSave": "on" {% endihighlight %}
    - Задержка при автосохранении. {% ihighlight json %} "files.autoSaveDelay": 5000 {% endihighlight %}

    По умолчанию файлы сохраняются только тогда, когда пользователь об этом попросит. Это поведению можно изменить, включив автосохранение файлов. Также можно настроить задержку после ввода перед автосохранением. Величина записывается в миллисекундах.
- Терминал.
    - Размер шрифта. {% ihighlight json %} "terminal.integrated.fontSize": 14 {% endihighlight %}
    - Выбор терминала. {% ihighlight json %} "terminal.integrated.shell.windows": "C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe" {% endihighlight %}
    - Тип курсора. {% ihighlight json %} "terminal.integrated.cursorStyle": "line" {% endihighlight %}

    Все настройки, связанные с терминалом, находятся в разделе *Integrated Terminal*. Например, вы можете изменить отображение курсора с блока на линию.
- Специфичные для языка. Настройки для кода также можно ограничивать конкретными языками. Для этого нужно перед настройкой указать идентификатор языка в квадратных скобках: {% ihighlight json %}  "[csharp]": { "editor.wordWrap": "off" } {% endihighlight %}. Идентификаторы можно посмотреть в списке всех языков ({% ihighlight bash %} CTRL + K, M {% endihighlight %}).

## Создание задач
Зачем нужны задачи покажу на конкретном примере. Для локального запуска сайта я использую команды:
{% highlight bash %}
jekyll build
jekyll serve
{% endhighlight %}
Для того, чтобы делать это, не выходя из редактора, можно использовать встроенный терминал. Однако, можно автоматизировать и этот процесс. Для этого существуют задачи. Откроем их конфигурацию через Command Palette: {% ihighlight bash %}Tasks. Configure Tasks{% endihighlight %}. В открывшемся файле *tasks.json* создадим кастомную задачу.
{% highlight json %}
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "jekyll",
            "type": "shell",
            "command": "jekyll build \r\n jekyll serve"
        }
    ]
}
{% endhighlight %}
Однако, это несильно автоматизирует наш процесс. Для запуска этой задачи нужно открывать Command Palette и искать ее среди других команд. Чтобы запускать задачу по кнопке, откроем файл *keybindings.json* (в Command Palette: {% ihighlight bash %}Preferences. Open Keyboard Shortcuts File{% endihighlight %}) и добавим нужные комбинации клавиш.
{% highlight json %}
[
    {
        "key": "f5",
        "command": "workbench.action.tasks.runTask",
        "args": "jekyll"
    },
    {
        "key": "shift+f5",
        "command": "workbench.action.tasks.terminate"
    }
]
{% endhighlight %}

Также задачи часто используются для автоматизации сборки кода и прогона тестов.

## Создание сниппетов
*Сниппетом* называется фрагмент кода, который можно многократно использовать. Для этого нужно ввести ключевое слово, и он будет вставлен в текст программы. Создадим простой сниппет, который генерирует цикл for для языка C#. В Command Palette введите {% ihighlight bash %}Preferences. Open User Snippets{% endihighlight %} и выберите нужный язык программирования. Так выглядит сниппет для цикла for:
{% highlight json %}
{
    "Loop For": {
        "prefix": "for",
        "body": ["for (int ${1:i} = 0; ${1:i} < ${2:UPPER}; ${1:i}++)",
    	    "{",
    	    "\t",
    	    "}"
        ],
        "description": "loop for"
    }
}
{% endhighlight %}
![snippet]({{ site.baseurl }}/assets/img/2018-02-18/snippet1.png)

Сниппет -- не просто текст. В нем можно определять переменные и указывать для них индексы, в результате чего будут изменяться все вхождения переменной сразу. Переходить между переменными можно с помощью таба.
![snippet]({{ site.baseurl }}/assets/img/2018-02-18/snippet2.png)

# Полезные комбинации клавиш
![keymaps]({{ site.baseurl }}/assets/img/2018-02-18/keymaps.png){: .book-image}
Если вы уже привыкли к горячим клавишам в других редакторах или IDE и не хотите из-за этого переходить на VS Code, то вы можете подключить знакомые настройки, просто установив нужный плагин.

Рассмотрим стандартные команды и соответствующие им комбинации клавиши, которые полезны в самых разных ситуациях. Маппинг команд и сочетаний клавиш можно открыть через {% ihighlight bash %}CTRL + K, CTRL + S{% endihighlight %} и переопределить на свой вкус.
- Zen Mode ({% ihighlight bash %}CTRL + K, Z{% endihighlight %}). В этом режиме окно с кодом занимает весь экран. Это располагает к максимальной сосредоточенности на этом файле и работе. Он отличается от полноэкранного режима ({% ihighlight bash %}F11{% endihighlight %}), в котором все пространство занимает именно редактор. В режиме Zen вы не будете отвлекаться ни на что. Для переключения на другой файл используйте комбинацию {% ihighlight bash %}CTRL + P{% endihighlight %}. Она работает во всех режимах и позволяет искать именно по файлам в рабочем пространстве. Выход из режима Zen осуществляется двойным {% ihighlight bash %}ESC{% endihighlight %}.
- Markdown Preview ({% ihighlight bash %}CTRL + K, V{% endihighlight %}). Полезная операция для тех, кто пользуется Markdown. Она отображает справа от текста результаты вашей верстки.

![markdown]({{ site.baseurl }}/assets/img/2018-02-18/markdown.png)

Редактирование кода:
- Дублирование строки вниз/вверх ({% ihighlight bash %}ALT + SHIFT + DOWN/UP{% endihighlight %}).
- Перемещение строки вниз/вверх ({% ihighlight bash %}ALT + DOWN/UP{% endihighlight %}).
- Комментирование строки ({% ihighlight bash %}CTRL + /{% endihighlight %}).

Команды выше работают и для нескольких строк.

- Вставка новой строки вверх/вниз ({% ihighlight bash %}CTRL + ENTER / CTRL + SHIFT + ENTER{% endihighlight %}). 
- Выделение строки ({% ihighlight bash %}CTRL + I{% endihighlight %}).
- Выделение слова ({% ihighlight bash %}CTRL + D{% endihighlight %}).
- Множественный курсор. ({% ihighlight bash %}ALT + CLICK{% endihighlight %}).

# Заключение
Мне трудно представить свой рабочий процесс без VS Code. Если вы им не пользуетесь, то советую хотя бы попробовать. Сегодня мы посмотрели на малую часть того, как можно упростить работу с кодом с помощью этого редактора. В следующий раз мы рассмотрим некоторые полезные плагины, которые есть в маркете VS Code.